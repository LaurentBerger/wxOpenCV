cmake_minimum_required(VERSION 3.2)

PROJECT (wxOpenCVMain)
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

set (wxOpenCV_VERSION_MAJOR 0)
set (wxOpenCV_VERSION_MINOR 0)
set(OPENSCENEGRAPH_FOUND YES)
file(GLOB wxOpenCVMain_SRCS
    "*.h"
    "*.cpp"
    toolbar.rc)
ADD_EXECUTABLE (wxOpenCVMain ${wxOpenCVMain_SRCS})

configure_file (
	"${PROJECT_SOURCE_DIR}/wxOpenCVConfig.h.in"
	"${PROJECT_SOURCE_DIR}/wxOpenCVConfig.h"
	)
message ("wxwidgets =  ${wxWidgets_LIBRARIES}")
message ("PNG_LIBRARY =  ${PNG_LIBRARY}")
if (wxWidgets_FOUND)
	include_directories(${wxWidgets_INCLUDE_DIRS})
	if (OpenCV_FOUND)
		include_directories( ${OpenCV_INCLUDE_DIRS} )
	#	include_directories("${OPENCV_CONFIG_PATH}/include")
		if (OPENSCENEGRAPH_FOUND)
			if (PLplot_FOUND)
				include_directories(${INCLUDE_DIR})
				include_directories(${PNG_INCLUDE_DIR})
				include_directories(${PLplot_DIR}/../../../include/plplot)
				include_directories(${OPENTHREADS_INCLUDE_DIR} ${OSG_INCLUDE_DIR})
			#     target_link_libraries( wxOpenCVMain ${PLplotwx_LIBS})
				include_directories(PUBLIC plplot osg)
				target_link_libraries (wxOpenCVMain ${OpenCV_LIBS} ${PNG_LIBRARY} ${OSG_LIBRARIES}  ${OSGSIM_LIBRARIES}  ${OSGTEXT_LIBRARIES} ${OSGVIEWER_LIBRARIES} ${OSGUTIL_LIBRARIES} ${OSGDB_LIBRARIES} ${OSGGA_LIBRARIES} ${OPENTHREADS_LIBRARIES} ${wxWidgets_LIBRARIES} PLPLOT::plplotwxwidgets PLPLOT::plplot PLPLOT::plplotcxx )
			else (PLplot_FOUND)
				message("Cannot build without plplot")
			endif(PLplot_FOUND)
		else (OPENSCENEGRAPH_FOUND)
			message("Cannot build without OPENSCENEGRAPH_FOUND")
		endif (OPENSCENEGRAPH_FOUND)
	else (OpenCV_FOUND)
		message("Cannot build without opencv")
	endif (OpenCV_FOUND)
else (wxWidgets_FOUND)
	message("Cannot build without wxwidgets")
endif (wxWidgets_FOUND)

IF(WIN32) # Check if we are on Windows
	message( STATUS         "WINDOWS")
	if(MSVC) # Check if we are using the Visual Studio compiler
		set_target_properties(wxOpenCVMain PROPERTIES  COMPILE_DEFINITIONS "")
		IF(WX_LIB_DIR MATCHES ".*[dD][lL][lL].*")
				SET(wxWidgets_DEFINITIONS WXUSINGDLL)
				DBG_MSG_V("detected SHARED/DLL tree WX_LIB_DIR=${WX_LIB_DIR}")
		ENDIF(WX_LIB_DIR MATCHES ".*[dD][lL][lL].*")

		if  (CMAKE_CL_64)
			set_target_properties(wxOpenCVMain PROPERTIES  COMPILE_DEFINITIONS "OSG_LIBRARY_STATIC;${wxWidgets_DEFINITIONS};__WXMSW__;_CRT_SECURE_NO_WARNINGS")
		else()
			set_target_properties(wxOpenCVMain PROPERTIES  COMPILE_DEFINITIONS "OSG_LIBRARY_STATIC;${wxWidgets_DEFINITIONS};__WXMSW__;_CRT_SECURE_NO_WARNINGS")
		endif()
		set_target_properties(wxOpenCVMain PROPERTIES LINK_FLAGS_DEBUG  "/FORCE:MULTIPLE /SUBSYSTEM:WINDOWS")
		set_target_properties(wxOpenCVMain PROPERTIES LINK_FLAGS_RELEASE  "/SUBSYSTEM:WINDOWS /FORCE:MULTIPLE")		
	else()
		if (NOT CMAKE_COMPILER_IS_GNUCXX)
			message (SEND_ERROR  "You are using an unsupported Windows compiler! (Not MSVC or GCC)")
		endif()
	endif()
else()
	if(UNIX)
		set_target_properties(wxOpenCVMain PROPERTIES  COMPILE_DEFINITIONS "-std=c++0x")
		set_target_properties(wxOpenCVMain PROPERTIES  COMPILE_DEFINITIONS "__WXGTK__")
        message("PLPLOT ==> ${PLplot_LIBRARY_RELEASE} 	 ${PLplot_CXX_LIBRARY_RELEASE}  ${PLplot_WXWIDGETS_LIBRARY_RELEASE}")
	else()
		message ("You are on an unsupported platform! (Not Win32 or Unix)")
	endif()
endif()
